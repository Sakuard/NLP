大家好,歡迎來到成人頻道,最真實的工程師Podcast在這裡會討論最新的科技發展、產業趨勢以及工程師質素分享喜歡本頻道的聽眾請到Echo Podcasts還有Spotify上面給我們五星的評價留言也分享給更多的朋友,讓我們把想法傳遞給更多的人嗨大家好,歡迎來到今天的節目,我是Ted今天這個開頭,我會講一下我自己的想法我自己的想法,我自己的想法我自己的想法,我自己的想法我自己的想法,我自己的想法大家好,我是Ted今天這個開頭,我已經吃了兩次螺絲其實剛剛發現好像也沒有錄好,但沒插算的反正我們已經一陣子沒有錄音了但因為頻道最近在做一些我們希望在內容上的一些調整以及我們重新去找一些來賓等等還有我們之後的一些計畫很快就會跟大家公佈但我們還是一樣,只要有好的內容還有一些很酷的來賓他們的經歷我們都希望能夠邀請他們與大家一起分享今天這位來賓是我自己算是有一次因緣際會看到他的表演我覺得非常非常有趣那也很有這個榮幸可以來邀請到他與我們聊聊他的經歷那我們事不宜遲,先歡迎今天的來賓,藍恩嗨,大家好,我是藍恩我覺得這個是我等一下再跟大家講為什麼我會這麼的開心有這個機會但在開始之前還是請藍恩先幫我們向觀眾介紹一下自己藍恩這個名字比較主要是用在喜劇院上然後反正我平常的工作是現在在微軟當軟體工程師然後我帶的Team是Power BI Team就是產品是Power BI然後Power BI底下的一個做Micro Service的Team叫做Analysis Service Team酷酷酷那剛剛聽到一個關鍵字喜劇演員我就是在那個有一次在那個多多人的那個宴他就是在蘋果那一位嘛然後我就有看到他們的一個笑話上的互動然後聽到這個笑話就覺得這個絕對是我們說什麼這是絕對是同行才能夠寫出來的嘛一定不是外面的一個路邊的人可以寫出來然後我就會找說那到底是哪一位表演者這麼有才那我們就發現了藍恩的表演然後我也看了一些他在YouTube上面的影片我覺得相當的酷可以跟大家分享一下說當時就是你這樣穿插這是一下子工程師一下子喜劇演員你覺得你的生活就是現在的比重是什麼哇現在的比重我覺得就經歷上來說的話可能是maybe是2比1嘛就是工作2然後喜劇1但是反正我心態上好像比較偏一個槓鈴策略就是反正我90%會壓在工作上就是確保工作是就是在一個合理的順利的穩定的進行的狀態下然後10%就是壓在喜劇這邊就是他很花精力但是獲得的金錢上的回報很少但是蠻有趣的所以就一直想要去做他這樣你的那個認識我的路徑真的是非常特別就是我真的是史上唯一一個就是透過Dudu Man的那個Rose1n的笑話發現這件事情蠻特別的沒有想過還有這個路線可是我們一聽到就知道說你知道有些人家不是說什麼是什麼行啊來之類的反正就是我們一聽到就覺得這個一定是你一定是要懂一點東西你才有辦法你才有辦法講出這些東西嘛然後就天線都翹起來我們就說可以了解一下其實確實我們剛剛在開始錄音之前跟藍暗聊了一下就覺得真的就是很其實我就覺得很發現就是很很像同溫層相近的可能我們在學生時候還是出社會可能遇到的人也都是很類似的人因為包括你剛剛提到槓鈴策略這也是我們自己一直以來都在強調我們在投資上也都是用槓鈴策略在做就是一定要讀一些報集嘛然後這種媒體某一個程度就是槓鈴的比端嘛就突然可能一些莫名其妙好處從天上掉下來之類的這個就是90%壓大盤一帖然後10%跑去買那個薰衣貨幣大概就是類似這種感覺對對對但我的槓鈴比較大便宜一點我的薰衣貨幣不只10%當然大家講的沒錯對這其實就是這個概念那我覺得其實在生活中槓鈴的一端就保保你自己不進公園但是另外一端其實就是生活中不論是你金錢上的報集還是你體驗上的報集還是各種你意想不到的好事可能會是出現在那一個端點那我們還是今天這一集會著重在工程師相關那當然我們本身是創作者也很希望可以跟藍恩聊聊更多那會在下一集再跟大家分享那可以請藍恩跟大家介紹一下你在微軟的角色跟你日常的工作職責大概是哪些嗎好我講的比剛剛的詳細一點就是反正現在微軟基本上就是軟體工程師就是做的事情就是一般的規劃feature然後寫code這樣然後剛說做的是analysis service就是整個power BI這個做這個軟體以防大家不知道什麼是power BI總之你可以把它想像成如果從來沒聽過的話你可以想像成是Excel不是有一個就是畫圖表的功能嗎然後你把那個功能複雜大概100倍就是power BI的長相就是它做的事情就是主要是focus在資料視覺化的部分然後它複雜的點是在於說你可以同時導入很多個data source就不同的data base或者是你想要從網頁裡面去撈資料或者是你有一些檔案類的或者是你local的file它可以透過gateway再forward到power BI上就是反正資料來源很複雜然後你可以對圖表做的權限控管也很複雜所以總之就是一切都可以高度客製化的狀態所以就是反正它是一個500多個人500多個RD在開發的一個軟體這樣然後我負責底下的這個micro service叫analysis service它主要是負責跟data source去做接觸就是我們會把data source的就是不同data source的東西拉進來然後在memory裡面形成一個方便query的cache就是以效能為核心的一個memory的solution這樣然後我們也有一個analysis service自己有一個query的語言叫做dex然後反正我們要去支援這樣的查詢這樣然後analysis service這個服務它已經超級久了大概20年就是它跟第一代的SQL service或是Excel是一起出現所以這個codebase已經超過20年但它被用在各式各樣不同的地方這樣所以反正基本上就是在裡面去開發新的feature這樣然後另外一件事情好像可以提的是我們每兩個月大概會要值班一週那那個值班基本上就是你會當第三線的客服就是你要負責去解就是客戶被Excel上來的ticket就是他遇到一些很奇怪的issue然後一般的客服解不了你就要負責看這樣然後我們也有很多什麼monitoring alert這種你也要負責去排除就是去看是false alarm還是真流regression這樣了解剛剛提到幾個點我這有幾個問題想問我先跟大家講如果大家還不了解power BI的話你可以去參考陳真頻道的211幾那Stark有來分享他前陣子剛有出了一本書那剛剛提到說你現在處理這個服務的codebase已經超過已經有20年那會有很多技術債嗎就是比如說你們要開發新的因為剛剛提到現在是micro service然後micro service這個概念顯然是比較後期的東西那在前期那種打爆一整炮的是不是有點不太好讓你們拿出來弄就是技術債的話我自己體感是覺得會有一些東西被拖著但不會有就是沒有人就是沒有人知道那個地方要怎麼動就是這個倒還好的原因是因為他雖然超過20年但我們聽也有超就是好幾個是你知道從最一開始就在20幾年然後他們就那開始的codebase甚至是C就他還不是C++他是C所以就是現在還是可以看到我們code裡面有很多用一大堆macro然後那些macro拼拼湊湊其實就是C++的某一個modernize的功能所以其實我們除了在推新的feature之外一直有一個就是在background在做的事情是去modernize很多東西同時在reflect一些舊的東西這樣對對對但我比較少參與modernize的那個部分因為就是他比較需要對C的那一塊codebase很了解的人來進行但總之比較新的大概都是用C++C sharp在弄了解如果這個轉換聽起來就很痛苦可能你要從C的概念然後再轉到OOP的這種東西你是要對兩個語言都需要很了解真的而且C在那邊指來指去指到不知道指到哪邊了我自己在看的時候我就是覺得很你知道在看一個我不知道IG金字塔的感覺就是他用一堆macro去堆出比如說他自動free東西就是OOP裡面會有的概念然後他用C去把它硬刻出來其實也蠻屌的對這個東西我要帶出來稍微分享一下就是我永遠記得有一次我跟那個就是我以前學校學長姐去錄應該兩三年前然後就是有那個比較偏機械演藝的學長他們就在那邊分享他現在在寫程式然後他就有一個人就說其實C也可以寫出C++的那些什麼繼承另外一個就跳出來說一定可以啊然後在那邊分享我心裡想說靠北啊我當然知道可以啊有沒有人會這樣用而已啊真的就是如果你現在2024年還在做什麼事情這真的自找麻煩耶我覺得對啊就是有時候真的是一兩句話要聽到這個人是不是來搞笑的不過這也是感覺還是蠻酷的一個經歷那可以跟大家分享一下你的那個uncoin因為剛剛說你說第三線因為據我所知像是比如說AWS那些supporting他們不是都是會有一些customer support專門在談第一線嗎那種應該是不是就可以擋掉八九層的東西對就是但那個就很仰賴我們的文件就是或者是我們的一些那個叫做troubleshooting guide那些東西他寫得很清楚就是第一線會比較知道要怎麼處理然後第二線的話就是也是算約聘嗎的我們叫他live site engineer他負責處理就是這種第二線然後或者是這種monitoring alert他們一定會先看過然後我們一樣會在troubleshooting guide裡面先做一些指示就是比如說你先跑什麼query然後去看結果然後那個結果如果是你也沒辦法判讀的情況才會到我們這裡來但很多時候來到我們這邊就是真的是有regression就要花比較多時間看這樣所以才會說我們是第三線反正我之前在前一間公司是群會嘛然後我來微軟之後就是我覺得最大的一個最大的一個culture shock是那個在值班或者說要去處理客戶的case的時候就是trace這件事情log或是trace就是無論是有一個叫做custle query language反正有個app叫custle然後他基本上客戶的log會先導到那邊去然後你就可以用很像sequel query的方式去查詢trace所以他可以做一些比較有系統化的比如說你要去查看趨勢或者是你了解什麼事情從什麼時候開始發生然後或者是過去這個error有多長出現就是它是不是很關鍵的error這種我都覺得超級無敵方便的就是你在應該說他會給你很多insight吧就比起你要直接去客戶的機器上然後把一個檔案打開然後在那邊小note pad慢慢翻我就覺得有那個custle query language好很多所以你們monitor是用internal的吧沒有用什麼比如說一些dashboard什麼gwafana還是什麼什麼elk那些就收這些東西之類的有就是有自動化的alert就是它也是那個alert基本上也是某一個custle的query然後result如果結果比如說什麼大於就是reliability掉超過10%那它就會送它就會寄一封信過來就是它也是基於custle這樣那這些login的東西也是你會碰到還是說你們是這個team除了開發feature以外也要去build這個flow嗎還是這個其實就是就是那些login也是開發的一部分就比如說我寫了一個新的feature那我可能就必須要負起相對應的責任去加上monitoring alert比如說我知道某一個case是不應該發生的那就是我就要去monitor這個error trace有沒有發生適度的留trace讓後面在debug的人能夠看到它必要看到的資訊但同時是在一個符合GDPR的preferency條件下是蠻重要的真的一定要有好的login不然那真的是會通靈通道窮窮出來真的耶以前這個群輝真的好常通靈就是你也不好意思一直去煩客戶你就只能在那邊猜到底是什麼原因因為群輝還是會碰蠻多蠻多硬體相關的問題喔對對對沒錯就是要去他的NAS上撈檔案所以現在舒適很多嗎聽起來是比較有系統性在做debuging之類的對啊就是就是問題你遇到的問題會變難但是同時你能夠使用的工具也變多了所以算是一個一邊痛苦一邊開心吧這個工具我們稍微等一下可以聊一下就是我感覺是不是是不是Adrian現在你們內部應該所有的東西整個SaaS都是在internal的cloud然後你們也有Adrian的一些support所以應該是很完整吧畢竟Adrian現在也是第二大的provider然後也很多都有資源一些ISC的東西都有嗯嗯嗯就包含那個log就除了我們看到之外我們也會開始希望客戶可以自己去排除一些問題所以之前有做過一個專案叫什麼byolla那個叫什麼bring your own log analytics就是客戶可以去查看某一些我們開放給他們查看的log所以他可以自己去用query language去看他的機器到底發生什麼事情或者是他的performance就是他自己可以用那些東西去畫啊比如說他的performance圖表啊這種哦那你們在內部的這些service就是直接deploy到Adrian裡面嗎就這一段也是你們在做嗎還是你是開發他的業務邏輯的部分就是他的framework會是其他team負責但就是我們要去leverage這個framework也是要照著他們的格式或者是要跟他們溝通我們應該要怎麼寫然後比如說我們能夠送scale到什麼程度的log過去也是反正要跟其他team合作那像以現在這樣的工作內容你覺得要你挑幾個你最常用的技術或者是框架還是語言是哪一些最常用的應該是C++跟C Sharp就是我從前面提到然後他的framework應該會是在打那個framework下吧然後會裝一些new get什麼的但之前就是為了要因為我們剛說我們是一個micro service所以假設我們要做一個end to end的功能的話就是我們必須要跟比如說偏UI的team或者是我們更前面幾個反正他是一個service call一個就是跟我們前面的幾個service合作然後要跟UI合作但就是每個team都有自己的schedule所以就是之前因為UI team很忙所以我們之前要自己弄一個end to end的東西就想說這個UI很簡單不如就我們自己派幾個人去把它搞定所以我之前有被就是從頭到尾自己要去串一個功能就是也寫過一些typescreen但那個就真的很痛苦就是我跟這輩子沒有寫過什麼angular js這種然後就是瞎子摸像一樣就是去寫UI這我完全可以理解我之前前陣子也是那種很小的功能我也是support一下方案幹超痛苦不過還好有GP真的耶這真的沒有AI真的會瘋掉對啊超煩的我覺得那個就是這感覺不是太難你就是沒有碰啊你也懶得碰對啊就是你看到一堆angular的功能但你又不曉得就是它的那個背後的機制是什麼然後所以就是太多那算什麼我覺得很多昂弄昂弄就是你不知道你不知道但你就是卡在那裡這樣所以就真的是要靠AI幫助確實真的是感謝感謝這個時代其實剛剛提到這些C++C去好所以你覺得要寫好這兩個哪一些東西哪一些技能是最重要的OOP design pattern之類的嗎嗯我想一下喔這個問題對我來說有點困難的一時間想不到怎麼回答的原因是因為好像我從大學開始學寫程式的時候就是學C++所以對我來說就是C++就是一個你的母語就是很fundamental的language所以不太確定假設是假設你一開始是學python或幹嘛的然後你要切來C++的時候會覺得什麼東西最重要因為對我來說就是那些東西都是它就在那邊所以好像有點難回答我可以理解的因為這對本科的學生原本就是這樣訓練上來所以你的那些作業啊什麼資料結構原算法全部都是C++寫所以好像也沒有什麼特別的就是C++那假設是你你會怎麼回答這個問題因為我之前是寫我說實在是寫C++但因為我那個時候我比藍藍小一點所以我們那時候Machine learning開始變很紅應該說你們那時候就滿紅但我們那時候更紅然後那時候變成說開始比較常用python然後變成很多不是ECS相關科系的都在寫python你知道python沒有那麼難嗎這種這麼上層的語言所以他們還忽略掉一些比如像我們剛剛說的Design Pattern、OOP、Rx這些很多人會忽略但我覺得C++它這些你要寫得好你對那些什麼你應該有讀什麼Effective C++吧這支C++都有看過所以你對於一些那種那種封裝既成多行這些概念我會覺得說大家不是應該都會嗎剛後來我現在發現很多寫上層的就包含這些轉值班很多人是直接跳過這一層的所以就很像他們基礎是很不穩的就假設地震來會倒的那種感覺他們在不穩的基礎上面蓋不穩的房子我覺得現在很多新一代軟體工程師是處在這種狀況我覺得好像我進微軟之後感受到一件事情因為反正我們Tim在做的事情是跟memory高度相關的就包含我們撈了幾億筆的資料過來然後我們要怎麼樣存成一個有效率讓它可以query比較快但是同時又不會真的佔到非常多memory的形式所以就是在memory allocation上會非常小心就包含你一個東西很頻繁地allocate又很頻繁地free就是導致記憶體碎片化就是這種事情是大學的時候你只會在課本上讀到但是就是真的發生問題的時候就是因為你一直很頻繁的小塊的然後allocate又freeallocate又free然後到最後你要allocate一個大塊的時候儘管數據上你還有memory但是你已經你會allocate失敗就是真的會遇到這種事情然後想說這種事情是真的會發生就是一些很底層的操作嗎就是一些概念我覺得蠻有趣的就是感覺比較真的是要碰十一家家才會碰到這種事情對就是這種跟記憶體相關的這種point的東西是我覺得現在很多新進的因為現在最多人聽到要轉轉眼的功能是你基本上100個要轉轉眼的功能是應該有101個都不會選C++都一定是選最多聽到就是什麼JS那些是最先聽到的可能Python也有一些吧或者是那些上層語言但因為上層語言你要動不難所以你剛剛提到這些memory東西比如說他今天寫一個web service然後他記憶體有個8G 4G其實你要他寫到爆掉也很難但是像你剛剛說記憶體這種你要是記憶體你用Ninja search你知道搜尋到什麼時候對啊所以我們一直也跟聽眾朋友分享說雖然說我知道現在很多轉職或者很多工程師相關的媒體他們出來但很多人他們一直用一些比較fancy或者是比較快速去可以catch up的一種一種態度在做這件事情的話那個其實你是走不遠的因為我們都知道我們包含我跟藍安或者是我們身邊一些朋友在這種真的是很算是同時都很頂尖的地方你那個差距真的是一看就知道就你那個差距真的是一看就知道能不能跟大家合作其實你會發現最重要的是一個底層的語言就你有沒有共同的一個語言就是你們在講一件事情的時候你有沒有辦法快速去收斂這個問題因為剛剛提到這種碎片化的那個釋放這個對很多人來說他看他記憶體怎麼運作都不知道那你這樣子在工程師的路其實就會走得比較辛苦一點但是我想問藍安你們的公司大家是不是應該都是有應該比較深的應該比較少會有基礎比較不穩的狀況嗎因為我們不知道我們這些過面試都是要經過很多關卡的因為以我們的面試來說我不是好像每個公司不太一樣因為像我之前要巡迴轉直的時候我曾經面過Google跟微軟然後我會覺得Google的面試好像很它比較希望你一次講出就是正解就是給你一聽到問題你就是給出最佳解但我們好像比較多會觀察那個溝通的過程就是你怎麼樣去解讀這個問題然後你有沒有問一些該問的follow up question就是比如說他應該要更在意記憶體的處理嗎還是以效能為主還是幹嘛就是因為這個溝通的流程就可以知道什麼東西對他來說是不是unknown unknown其實最怕的是你在寫一個東西但你不知道你不知道什麼東西就如果你知道你不知道什麼東西那就還好解決尤其現在是AI的時代你就是問AI說這個東西我不會教我但有一些東西是你不知道你不知道然後假設你這輩子也沒有碰過那你就真的會卡死在那邊因為你也不知道為什麼會這樣那總之反正我覺得在面試上的那個溝通的流程好像蠻重要的就是其實在溝通之中找到一些資訊去收斂問題這也是我們平常很常做的一件事因為有時候問題那個bug實在太大所以你沒有去收斂問題你要解根本就很困難特別是這種在框架越來越大的情況不然剛剛提到這些這種學習或是這種問問題的方式不然就以想說你做過了一個我覺得挺有趣的項目叫Automatic Aggregation那像這個項目你是怎麼樣去優化你剛剛提到一些比如說插層效率等等是怎麼樣去做到這些包含說從算法上嗎還是從工程上嗎是怎麼樣去完成這個項目好啊要講這個feature的話就可能首先要先講一下應該說在Power BI裡面就是你publish一個report就是應該說一個圖表它背後有一個東西叫dataset那那個dataset你就是理解成是以Anaxie Service來說就是我們Loading Memory的一坨東西這樣那它其實有兩個有兩個模式一個叫import所謂的import就是我們會幫你從你的data source就是可能複數的data source裡面把東西拉來我們的memory裡面它變成一個很像cache的東西這個是import mode另外一個叫direct query modedirect query mode就是我們裡面不會存任何東西然後當從圖表上的因為它會變成一個query就是你要去query什麼資料然後過來的時候我們會幫你轉成data source的query language去要資料等於是我們只是一個轉介層反正有這兩個模式那你可以想像後者這個模式基本上就是它的效能一定會比較差因為它要它不管怎樣都要往你的data source去打query所以它的turnaround time會非常長然後import mode的壞處就是假設你的資料超大而且其實你有一些資料根本就已經是超久以前的資料那你還是會被揉進memory裡面那就會佔很多memory所以反正automatic aggregation這個feature基本上就是想要在中間找一個平衡點就是能不能夠不要用這麼多memory但是我們又把最花時間的東西cache起來然後所謂的aggregation基本上就是說你可以對colour去做很多計算就比如說你想要對你想要知道某一個客戶在這個月總共花了多少錢那你就需要一個calculation就是sum然後有一些比如說min max這些也是很常見的calculation那這些假設你有一個新的colour然後它存放的值是這種calculation的結果那我們就會說就是含有這個colour的table叫做aggregation table假設你是在direct query mode的話它其實很吃計算的量因為你就想像它可能要low兩張table然後join完之後算出結果你才可以送去UI所以雖然它沒有穩定存放在Analysis service的的資料但是你從datasource load進來的時候它要暫時建出一個aggregation table那個table會爆幹大就是它會吃非常多memory然後你的時間也會花很久所以假設我們可以根據它過去的query的pattern然後去判斷說假設你70%的時間你都在query那你會選擇一個query的結果那我們就把它cache起來所以大概是這樣就是我們會讓user選說假設我想要coverage是80%的query你過去一個月80%的query我都希望你把它cache起來那我們就可以幫你建一些就是預先算好那個aggregation table放在我們的memory裡面那這樣你在query的時候就是最花時間的那個計算aggregation table的時間就會被省下來是嗎就是import mode就是會把你可以想像import mode會把你的所有datasource的資料都存起來然後direct query mode就是什麼p都不存 但是當你在direct query mode下然後你去下一個query是aggregation query的時候就是你要去做sum你要去做minimummax然後是又有不同table的join的時候它就必須要去計算那那個計算的過程就會create一個暫時的table它算完就會被release掉但是那個join就可以想像那個join的table會超大所以會很花calculation跟很花memory過程當中的memory那你們這樣子的hardware是怎麼跟上就直接開一個node然後那個硬體拉到門給你去用這個然後一個job結束給他因為它本來就是很多一個node上面本來就會跑很多個analysisservice然後同時會serve很多客戶所以有時候會遇到假設low-balance沒有low-balance好的話就會遇到noisyneighbor issue但總之就是那個node本身的memory是夠大只是對客戶來說那個時間還是很長這樣這個真的是你們才能這樣玩啊只有自己有自己有基建的才可以這樣玩不然外面把它拿來直接燒起來對阿反正總之就是用這個方式去取得同時兩邊的好處就是不用穩定存這麼多東西但是又可以加速query然後這個其實是美國senior member的hikerson的project這樣然後他概念驗證可行之後我們就把它尻成一個正式的feature這樣了解酷感覺真的是有時候其實真的在這種系列裡面才發現有一些solution這真的不是你想不到只是你有沒有那個錢來做沒錯還是蠻屌的那我覺得應該是因為包含你們自己的做在你們生態系裡面所以我相信效能應該是挺好的吧如果說對外部user來說的話還是你覺得他們還是會comprehend說這個還是很久但也沒有辦法更快都in memory在做對應該說就是看客戶的資料的scale就是如果你是那種幾億筆資料那你要快也真的很難快的起來聽起來是要你要常跟客戶就是有一些溝通嗎在你的工作內容主要是值班的時候因為值班的時候你也會收到一些ticket是客戶說為什麼就他們最常講就是我什麼都沒做但是我的refresh的時間就是比如說import mode那我們要去更新你memory存的那一大包的東西就是你要去可能一天兩次你要去refresh他就是把資料更新然後他們就會說為什麼我什麼都沒做refresh多了一個然後我們就要下去幫他看所以就要了解就是要去看學會去看各種數字或是他的data source的各種狀況然後為什麼refresh會變慢因為performance對客戶來說還是蠻重要的確實了解performance但powerpi不是一個比較偏數據處理或者是dashboard所以他們也對對那個數據的速度要求也到這麼高應該這樣講就是如果你點開report然後你看到數字那個東西跟我剛剛講的refresh不太一樣剛剛那個剛剛那個點開畫面然後你看到圖表跑出來這個東西叫做query的時間因為他基本上是送query到後端然後拿到結果回到UI去render出來然後剛剛提到的另一個refreshdataset refresh是就是你點開UI report的時候你看到的資料會是假設是import mode的話你看到的會是上一次我們memory裡面存好的資料就是比如說假設你是一天兩次的話那就是看到最久可能看到半天以前的資料但那個你會很快的看到然後我們在做dataset refresh的時候就是他要重新去dataset把資料都撈回來那個東西可能就會到好幾個小時就是depend on你的資料量有多大對我理解這個東西我是說他們對於這種資料的取用有到就是他們有到很要求的高比如說你今天假設你要做交易交易可能每個mini second都需要他很快的response給你像他這種分析的他們也會要求到很高速嗎每一家不太一樣九是一個小時跟五個小時這樣子的比較還是說到什麼哪一個等級的速率但我覺得好像都有也有客戶是他的資料量爆幹大但他很要求就是他每五分鐘他就要refresh他就要更新一次那這種我們就要去幫他設計他就不能一次refresh所有的資料可能refresh他是只refresh最近期的他的範圍是設定在今天那他可能就可以用五分鐘的頻率去refresh這個最近期的資料這樣我理解了還是看客戶的需求以及他有多少錢你越頻繁要去做這件事情那你的資源耗費就會越大他就不怎麼可以那剛剛這樣聽起來是需要蠻多在專業上面的一個素養還有跟一些溝通合作等等可以跟聽眾朋友分享在微軟的工作文化還有你們的一些團隊協作經驗等等嗎我覺得好我先分享一個就是我從群輝來微軟的時候就是另我剛剛已經講了最考求小那我就是第二考求shark就是微軟這邊至少我們沒有QA你們是加QA還是QC反正就是寫測試的嘛是嗎沒有QA也沒有QC我們所有的tester都要自己寫也不會有人手動幫我們測我們要自己做manual testing就是要自己加alert自己加tester自己寫文件這樣然後code review也要做得很嚴謹才有辦法在這個過程中把bug都盡量的濾掉因為沒有人在後面以前幫你所以我有的沒的測試一來的時候覺得蠻正經的那你們測試要做哪幾層像我自己會寫unitest可是如果要做那個比較大regression test也是自己做嗎對就是unitest然後再來是會有一些component test或是API level的test然後再往上的話scale再更大的話有叫做cloud smoke test就是他是n2n的所有東西都是真的然後架起來跑這樣然後也會有regression test就是比如說你真的發生過regression那個東西在postmodern的時候你就必須要去加一個regression test這樣然後也會有各式各樣的像我們feature要關的有一個compliance meeting那個compliance meeting裡面就會去分析就是你在比如說security, privacy, accessibility這些領域上是不是都有達成必要的事情我自己覺得還是算蠻嚴謹的這樣對這樣聽起來是真的蠻嚴謹的所以節奏算是因為嚴謹代表時間可能會拉得比較長嗎會拉得比較長那公司的節奏算是快還是還好有些還是有時候會很快但大部分時候尤其是新feature要roll out他的他一定不會抓這麼緊像之前很趕的是stremus2反正他是GDPR的一個延伸就log或是privacy上面要趕快去做調整反正那個都是歐盟法規他就有一個時間限制那個反而很緊急也是蠻有趣的了解所以還是開cast不太一定是不是對但大部分時候不會到真的很緊急反而會比較希望你把事情做好再推出去這個也是比較好的狀態比較很多感壓之上我覺得很恐怖然後文化的話我覺得另外一件事情是他整個powerbase的codebase超大包含我們自己的analysis service codebase超大尤其在值班的時候很常是一個問題來然後客服說怎麼會這樣我跟你一樣疑惑我也不知道這邊到底在幹嘛你就要開始去讀code然後去讀log我自己覺得有種你在黑壓壓的森林拿著手電筒前進的感覺反而就是來了就會發現你一邊學習然後一邊改東西的那個能力很重要去接觸未知的東西你要快速去理解它去分析它的問題可能出在哪裡感覺是來這邊會應該說我來這邊之後覺得這是我實現的一個能力那在那種這樣的文化裡面你覺得自己還算習慣其實你喜歡這種節奏嗎目前我覺得還可以但就是比起來跟之前的工作的話會覺得自己能夠掌控的scale變小了因為太多人同時在做一件事情所以所有地方都在所以你會覺得好像永遠都沒辦法完全了解整體在幹嘛的感覺你只能掌握你自己手邊現在有的事情這樣這個確實是在蠻多很大的產品線都有可能會遇到一個狀態不過常常就是有一陣子做這個有一陣子做那個就是假設你之後就做那種自己hold全部現在也有可能也有可能反正我覺得在這個過程裡面好像要慢慢去探索說我想要去往哪一個方向前進我想要對哪一個component的掌握度比較高因為太多選擇方向上的選擇在工作上的路線上也有很多可以選擇像我們也是有些member他就是選擇把一個component挖到很深那個component基本上就是他因為他了解裡面幾乎所有的細節這是一種路線然後也有另外一種路線是覺得好像他是站在所有的就是跟team之間的連接點就是他比較了解兩邊在做什麼所以當跨team的東西去詢問他的時候就是可以比較快的得到solution然後他可能假設他同時站在好幾個就是這種跨team的點上面就是他擁有那個銜接點的domain knowledge的話其實也是蠻有幫助的好像有很多在這麼大的team上面也有一些不同的發展方向那像這些東西就是剛剛提到的這些發展方向或者是你對個人career path或者是自己在技術能力的一些學習你有什麼樣的一個學習方式就是讓你保持去了解新的技術或者是說你個人技能的提升通常是怎麼樣去規劃我覺得我好像不是就是比較少在下班的時候去讀一些就是應該說技術前沿的東西但比較常在做的事情是去因為應該這樣講就是我覺得以比如說三年後來說就是今年跟三年後我覺得一個很巨大的差別就是可能技術的frameware會也會改變但我覺得比較大的改變可能是我們跟AI協作的方式所以我現在是比較積極在觀察就是工程師到底能夠有哪些AI的tool或者是跟AI互動的方式可以提升我們自己的生產力這點我也是覺得是很重要你說那你目前來講藍恩這邊有用什麼樣的方式去用AI工作流程的用法現在的我覺得我好像用的tool也目前也都跟大家差不多但微軟自己有一個內部的tool它會有點像是chrgbt但它已經被pre-trained就是它有為了一堆adrior相關的文件然後包含powerbi的所有的document也都在他的knowledge base裡面所以就是你跟它互動就是你有問題直接去問它通常它就會把你導到一個超正確的地方然後給你一個很好的答案這樣所以就是這是一個很好用的內部的tool然後再來另外一個就是github copilot你copilot要錢嗎我們內部不用爽幹畢竟是自家產品之前在寫UI的時候就覺得超有幫助因為我對angular基本上理解幾乎是零所以跟copilot就是一邊應該說你可以問它這邊到底很多東西在幹嘛然後一邊跟它溝通說我現在想要做什麼然後你可以怎麼幫助我這樣我覺得它的一個很大的用處是在拓荒我覺得好像不止UI就是在很多領域上它拿來拓荒也都蠻有幫助就可以幫助你省很多時間然後就算是在你已經很熟的code base裡面就是它不是會有一個功能是你寫註解它就幫你把下面一段code它就幫你猜你要幹嘛要把它寫出來就是那個它只要有個九成對然後你再你先把它auto卷出來然後再繼續手動改一改那個產出都會比以往快蠻多以前大家說那個要寫註解是為了讓你的程式在開始寫之前你要了解自己要寫什麼現在是你是要寫註解給AI了解你要寫什麼真的它會寫過度詳細然後喂給它說這邊的資料結構長什麼樣子不要搞錯了真的這個真的是所以我一直覺得軟體功能雖然現在很多人說什麼以後就是AI寫code不需要軟體功能我覺得那個它們這樣講就代表它根本沒寫過程式因為你懂軟體的軟體功能是下了pump跟你路人下了pump那我怎麼可能會一樣嗎那個層級還是差很多那剛剛提到這些AI流程的優化我是我自己也蠻認同因為你看AI開始我會覺得你要我真的覺得AI真的讓工程師完全的可以輔助我會把它定義在4.0出來之後因為我覺得3.5還是有一點破嘛所以呢大概是一年多一點的時間而已大概一年可能不到不到一年半因為3.5出來到現在不到一年半那4出來可能出來一年那一年就改變我們這麼多工程師在工作方式的改變三年之後天知道又出現什麼奇怪的東西真的耶而且我覺得現在的我覺得它現在用起來它的一個最大的阻礙或者說它之所以還沒有到頂級好用的原因是因為它沒辦法一次讀整個project的內容就是它只能選它只能讀你現在所在的這個檔案或者是你把東西餵給它它才會看到但它沒有辦法一次看到整個project或者是假設它可以一次看到整個project我也不確定它能不能一次consume所有的內容就是搞不好反而產出來的質量會變差也說不定但不曉得但假設我可以合理推測三年之後它應該是可以一次讀整個專案到那個時間點其實現在有個方法就可以這樣做但是你們在internal或許可以但是這個其實很多是外面是不太建議這樣用我沒有這樣用我先講不要來抄我的表但是我聽過演員這樣用現在新的GPT有GPT4有一個叫GPTS的東西你可以customize你的GPT你知道這個功能嗎然後我認識一個朋友他每個專案都把每個專案的callbase就是callbase會直接砸進去然後呢然後再開始問問題就一直問他GPTS所以他等於說那個GPTS是專門符合這個專案所以那個GPTS就已經被他訓練成這個專案的形狀就是那個GPTS感覺是他能夠為的東西如果他的project大到某個程度他不是就是那個GPTS會沒有辦法在這麼多內容下去進行有組織的分析像GPTS目前還有這個問題所以可能callbase不大的話這樣做還算有效如果是像你們那種就是幾萬函幾萬函在那邊噴的那可能沒辦法但如果是一個中小型的專案我覺得這個應該是很屌的一個做法因為他做的事情是很小型的因為他做的事情比較沒有那種security相關的所以他可以這樣搞不然還是給大家一個警語我不太建議這樣搞你那個等於把你的call傳出去跟他講這只是說可以這樣做要不要這樣做是你的選擇這樣那在那一部就是你們這一件事情是open minded就是說公司內部大家都是瘋狂在用AI在support你的工作我先講一下我了解到的情況我跟一派人是瘋狂用AI在優化但我有認識另外一派朋友是那種Vin哥他們是很hard core的他們反而不太喜歡用這種太fancy了他們跟我說的一個說法是開發習慣的問題因為他們以前就不太喜歡一直Google東西因為我的開發習慣是不會就Google不會就Google所以我現在變成不會做GBT不會做GBT那你們那邊的情況是什麼我覺得好像風氣上算很鼓勵要用Github copilot甚至還會有一些內部training是教你怎麼用雖然我沒有參加我不知道內部training到底可以教你什麼東西但總有內部training這件事情就代表應該是公司滿鼓勵你去做這件事情然後也會top downmanager會寄信說記得去申請這個內部賬號然後可以用這樣我也是Vin哥我覺得好像也沒有好或不好但最終就回歸到你的產出效率的問題就是因為我是相信假設我現在開始應該說嘗試跟AI一起生產東西跟我現在完全不做這件事情三年後我覺得那個生產力一定會有落差應該還是要慢慢去學習一定要而且我覺得用越多越好我現在連講話都懶得講我還掛一個local的語音模組直接幫我打字因為我媽打很詳細媽媽打太長了所以打太慢了直接用講的什麼意思語音模組你說你要寫註解還是寫code的時候嗎我直接build一個語音模型在local端然後在GPU直接跑我一邊講他就直接打一大堆字出來因為你用打的要打很久好屌然後我還直接掛一個翻譯模組直接講完之後他就直接變英文然後在英文直接貼進去這是一個你自己跟GPD互動的pipeline就是盡可能加速你每個地方都加速一點加速起來就很多點這個好讚了這個好工程師思維其實我這也是一直跟聽眾朋友分享你有時候你的技能不用變強你就變強比如說你的電腦換好一點你變強20%你剋晶控GPDX你變強20%你多一個螢幕變強20%你像我剛剛又掛一個語音模組變強10%剛剛就1.2x1.2x1.2x1.1你還沒有去變強你的CS基礎你他媽就已經變超強了這是從外圍的一個打擊我真的蠻推薦大家去做這種流程的優化因為我覺得軟體工程師就是一個一個一個建solution的人所以這個solution他建立的過程你把你自己的考慮進來其實或許有些在軟體工程以外可以優化也是可以參考那我覺得AI他現在就很大程度的去基本上我現在包含什麼M我都是用GPD在寫大部分都是GPD在寫所以我現在如果把GPD抽掉我生產力可能直接打七折六折吧我猜對他可以幫你做一些你不想做的事情然後或者是幫你節省一些就是你原本是用Google的時間然後反正我覺得這個好像也多少影響到就是我自己的對於career path或者是對於更中期的目標的設定嗎就是因為剛不是說有那種把一個component挖得很深然後以及就是站在很多個銜接點的就是反正有幾種不同的生存模式我會講說是生存模式就是他的domain value長什麼樣子然後我好像也會更傾向去更廣泛去碰各式各樣的component原因是因為我覺得好像有AI的話他可以幫助你排除所謂的non-non就是你知道你真的不知道然後AI就可以幫你很快的得出答案但他好像還是沒辦法幫你解決non-non就是你不知道有這個東西存在的話AI好像也沒辦法幫你因為你還是要下prompt所以對我來說好像去更廣泛的去碰各個component然後去大概了解他的運作方式會把non-non給更減少一些好像是比較好的策略但我也還沒有想得很清楚其實跟我現在的狀態也是滿類似的我現在也不是像我們都念碩士大家知道碩士其實就是你在某一個演算法你要把它挖得很近才能夠發一個論文之類的但做engineering我覺得可能不太需要因為我們是有時候包一個total solution我們每個東西懂一點AI在幫我們優化把它挖深一點其實我認為就已經很夠用了至少以我目前看來的情況是這樣子那我們挖深的程度那個能力可能AI它在幾年內它就可以成長到超越我們的情況或者是跟我們做到八九成的情況但它花我們時間可能只要花我們十分之一之類的這個狀況是我會滿認同的像你現在我們都知道說現在這種AI它已經改變很多人的一個狀態對我們工作狀態等等我自己私心會覺得一個工程師要怎麼跟AI協助它會是在未來三五年內如果一個在interview的過程裡面我們可以看到這個會是很加分因為我會覺得說一個人他懂得用工具可能他的彈性是更高但現在顯然這個指標還沒有被放進來可以請大家分享一下像外商大公司你們的面試流程大概是怎麼樣或者說現在有沒有像我剛剛說那些就是問他們怎麼用AI這個狀況有沒有會放在你的面試問題裡面這樣但面試這件事情我要先講2021年底不是開始升息嗎那個時候HiringFreeze不然去年初不是前年初已經是前年初了不是在裁員是2023還是2022年2023都有陸續反正那個時候在裁員在升息幹嘛有一段時間已經HiringFreeze大概兩年所以就等於是AI開始紅了之後還沒有開始招人過然後是最近大概這個月又開始要面試但我的體感是就面試這件事情還沒有把LavageAI這件事情放進來但我有跟一些也是軟體公司的朋友聊天他們就說他們在面試的時候就發現很多人開著兩個螢幕然後另外一邊可能是ChangeBD幹嘛假設是offline不是有些是用交作業的形式嗎我給你一個題目你先把答案丟上來他們就發現那個的通過率變得高很多原因是因為大家會用AI去做這件事情線上的面試大家也會偷偷的在旁邊放一個AI來協助你你剛才聽到什麼問題打去問AI這樣所以他們的面試流程也開始有一些調整我感覺我們目前還沒有很認真討論過這件事情但可能我們面到了幾個candy day發現大家平均實力會傾向去我不想講偷用但是理論上是不應該在這過程中有用AI可能我們的面試的流程也會跟著調整但目前好像還沒有開始就這方面去去做很明確的說要怎麼樣要怎麼樣改但我自己的話我可能會傾向就是在面人的時候我會多問一些follow up question就是去測試說你對於你寫的東西到底了解有多深就包含一些pointer或者是free或者是memory之類的概念你的東西應該說你寫出來的東西好的跟不好的部分在哪裡假設今天是space complexity要求特別高的話你會怎麼做類似這種follow up question的方式去確認他是刷題或AI訓練出來還是真的有domain knowledge可能要往這方向去走這個真的是挺重要的想要再強調一件事情我過去我上次面試也是兩年多前但我一直覺得有一點可惜的事情好像很多人是被英文擋住在面試的過程中但我明明就覺得英文面試不是特別困難的東西但我覺得可能大家是缺乏練習或是太低估這件事情如果英文爛到不太能溝通的話其實我覺得被這個東西擋掉很可惜但我覺得英文能力應該是大家可以花時間去build up起來尤其是就工程師這個領域你會用到的關鍵字基本上就是那些只要基本文法對關鍵字講出來就差不多可以但我發現很多人可能忽略了這件事情所以我以為會過你們HR的filter英文應該都爛不去哪裡還是會遇到這個狀況應該說我們的phone screen基本上就是我們自己進行了尤其是內推的話而且因為微軟還是有一些台灣他們面試可能不見得會用英文進行假設他們真的是純台灣他們整個organization都在台灣可能也許不會但因為我們是跨國的廳所以我們面試基本上都會希望用全英文了解,英文是在這個行業超重要的東西大家記得去研究一下除了這個你會建議假設有一個工程師朋友想去微軟你會推薦他刷個提議之類的嗎感覺還是要吧就目前的meta就是長這樣你就是要多練習寫程式,然後把英文練好應該說要能夠跟面試者好好的討論你的想法吧你有一個想法,然後跟他討論然後接到feedback的時候,你要聽得出來那個feedback到底代表什麼然後去動態的修正你的想法溝通能力你當時是刷幾題我想一下好奇因為我知道有一些人很狂熱我大概就是100多題然後高評刷有點忘記總題數多少但我記得lecon那個時候有一個現在還有那個叫做weekly competition你打多少,那你一定超多題我記得我那時候大概是去做到weekly平均可以過到3.5題我就覺得差不多了了解,現在我也蠻同意你說的,雖然這不是一個最好的方式可是太卷了所以現在大家你要去大公司你還是得刷一下對啊對啊對啊不知道,之前也看到一篇在文章上說,難度已經通膨到不合理其實你在工作上用到的技能跟你在lecon上你要刷到很難需要的skill set是不一樣的對啊,但某種程度上我在想,以正面的方式來解讀就代表說,就跟以前考學測一樣,你不需要你沒有道理要社會滿級分才可以進對,我現在是在醫學系但實際上就是他們篩出最會做最內卷王,然後就說這些人應該是最聰明的實際上我覺得應該也不會距離太遠只是他就不是一個很有效的指標對啊,現在真的是蠻卷的我可以聽到有一些人這樣講不過我會覺得在台灣你在medium的差不多100-200題應該就已經很夠用了,不要像有些人刷到700-800題,我覺得那實在太他們說現在真的是超卷的我一年都不知道,好早都是刷到爆掉壓力超大我覺得好像刷,除了刷題之外可能真的要花時間去build up英文能力吧,就是口說的能力對,這個真的是挺重要的我覺得可能可以用蠻多方式,不然我們分享一下各自練英文的方式我是沒有特別,但我覺得看每句蠻有用的我想一下,我那時候怎麼練英文的但我覺得我好像原本就不太害怕講但我覺得可能一件事情是要練習一邊寫code,一邊解釋你的想法或者是如果你英文原本沒有到很好的話,那你就是練習把你,你看到一個你在刷立口題目的時候一邊在心裡設想就是你會怎麼解釋你的想法然後再開始寫就是比較特化的去練習對,現在其實現在GPT4你用那個app版它可以直接語音播出來,所以你可以直接把它當成一個英文夾角或許這樣子去做一個英文的interview我覺得也是一個免費版不是免費,便宜版的練習不是有什麼character.ai嗎那個搞不好也可以你就跟它對話大家可以去找一下工具來優化自己的能力我蠻同意英文這個是很重要因為你如果在這種企業工作你別人在講什麼你都聽不懂你根本不用做,對吧還有口音的問題什麼的我那時候我剛工作第一年去印度人我完全聽不懂,我要錄下來,回去重聽現在沒什麼印度人那時候印度人超多的時候真的是壓力超大的現在口音的部分這個也是因為我們是用teams,它現在有即時字幕的功能有時候跟別team的人開會我真的聽得超不習慣我就把那個字幕打開,比較知道他在講什麼他那個語音辨識蠻厲害像什麼俄羅斯的口音,我有時候聽不太懂他很像說講英文,所有發音都是二聲的感覺感謝AI讓我們生活好過很多真的是改變很多因為我知道有一些聽眾朋友今天講的可能會比較比較偏後段一點大家可以參考一下接下來想要在這條路走久一點因為我們都走了也不算久以這個整個職業來講可能都算前期但是如果大家有未來預計你要在這個領域走個十幾二十年你剛才說的一些基礎基本的CS基礎,語言能力溝通能力這些都是要讓你在這條路上走得順可能都不可或缺的部分那可以那請藍恩給我們聽眾朋友一些建議,如果他今天不是一個太有經驗的工程師那他現在可能也希望自己可以快速成長你會給他什麼樣的一個建議讓他可以在軟體工程或者說在整個工程師的這個職業他可以比較容易讓他可以進到下一個階段好,我覺得我提一個想法好了假設你現在是一個工程師然後你現在在一個MogTip裡面你現在去尋找所謂的稀缺跟比如說喜劇院好像也是你在這個領域裡面看到什麼人很少去做什麼事情但理論上那件事情是很有價值的那就盡量去做它其實就是你時間投入在紅海跟藍海的策略的差別但有些事情就是明明就蠻值得去做或者是這個Domain是很有價值的但沒有人去很擅長它的話就往那邊去鑽反正我覺得是一個在軟體工程師裡面就是動態的去尋找稀缺然後去獲得那個領域的話語權會讓你在職場上面過得比較輕鬆我的感覺是這樣了解,就是困難的事情就早一點做嘛之後可能輕鬆一點有些不一定是困難它是重要,但是不知道為什麼大家不去碰也會有一些事情這個就是你要有意識的去觀察才會找到那些缺口那是不是在做這件事情之前其實對他們自己內部的一個組織或者他們整個框架整個架構就需要有些了解他才有辦法去找一個地方深入就可能一開始還是要先像你剛剛說的,一個東西摸深或者是一個東西摸廣的一個這個問題的選擇我覺得在玩次Skill多大或多小就比如說你在十幾個人的Team裡面有機會去找到你們Own的Component裡面有哪些東西是所謂的稀缺好了解反正不管是Skill還是大小要有狼心一點講難聽一點就這樣大家不要躺平了現在已經越來越捲了這個行業AI出來找到我只想問最後一個問題你覺得會不會接下來的幾年裡面比如說我們看了說現在GPT4到現在也才一年時間那在未來的幾年內你認為會不會有那種一個AI加一個Senior Engineer就爆打現在一個Senior Engineer帶一群Junior的狀況我自己是覺得這個情況會發生我的感覺我覺得會啊假設所有的公司的生產力都因為,假設所有公司不裁員的話他們的生產力都會提升三倍但這公司有需要三倍的生產力嗎還是市場的共識是我們只需要兩倍生產力就好這樣工程師就不用Hider這麼多一定會找到一個平衡點但我不覺得那個平衡點會是假設AI提升三倍生產力那就是所有公司都是三倍數前進就感覺不是一個市場的共識所以有人得下去哈哈哈哈結論就是這樣這跟我的想法蠻像但我相信大概就是這樣那祝福大家在這條路上就是有一些想法然後給自己一些堅持然後像剛剛說的你選擇去讓自己成為一個吸血之魚那你還是可以站得蠻好至少在我們現在不要到現在AI才剛開始那如果你是前傑工至少總比他變超完整的時候你要進來玩那可能就真的沒得玩了那如果大家喜歡今天的分享的話也可以就是幫我分享給一些朋友那我相信今天有一些軟體工程上的想法很多朋友都可以參考那在節目最後感謝藍恩今天的分享感謝藍恩好今天節目到這裡謝謝大家掰掰