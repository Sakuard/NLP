大家好 歡迎來到成人頻道最真實的工程師Podcast在這裡會討論最新的科技發展產業趨勢以及工程師質素分享喜歡本頻道的聽眾請到EcoPodcast還有Spotify上面給我們五星的評價留言也分享給更多的朋友讓我們把想法傳遞給更多的人嗨大家好 歡迎來到今天的節目 我是Ted今天這一集要跟大家分享就是也是在這個時候我跟各位的朋友都在一起所以今天就跟大家分享今天這個影片的主題是就是也是偏架構命開發的分享一樣歡迎今天的來賓 Tony大家好 我是Tony如果想知道Tony的一些個人經驗歡迎回聽上一集我覺得我們今天這一集是針對Tony的專業一些雲煙聲的概念來跟大家分享一些開發上的經歷可以跟大家分享什麼是Color Native為什麼對現在的一些service開發很重要Color Native其實它就是一個現在基本上非常泛用的概念就是一個非常Foundation的入口吧我覺得就是它簡單的講就是你現在所有的服務如果你不是自己host在主機用傳統那一套的話那你基本上都要放到雲上面去那你把它放到雲上面去每一個服務該怎麼做其實它就是有一個公式化的模板在這邊比如說你今天這一集整個服務你會需要用到某種database用到某種cache的機制用到某種network給你架構用到一些message queue之類的細節的服務這裡的東西就是這些cloud provider他們現在上面都已經有了很多包裝好的服務那你作為一個軟體開發者你就是要把這些東西做為一些minimal building block去把它堆積起來變成你的服務而不是說你所有東西都從頭開始硬做下去然後最後希望所有的東西都能動對就是這個算是一個現在非常需要去follow的一個rule不然如果你還是用傳統那個號去做的話你在Color上面的環境首先你開發速度會被明顯拉低很多然後你的performance可能也不會太好因為那些cloud provider在上面建立自己的服務的時候他們當然是根據這些大家都會去follow我剛說color native這些bluetooth block去optimize他們自己的系統所以follow這些東西的話會在現在cloud的環境裡面去開發軟體會有一個很大的好處然後因為它是一個已經是一個公司化的模板基本上每一家cloud provider他們都會去推對你的提供相關的bluetooth block在他們自己cloud的環境上面的版本所以你如果今天可能你在前幾天公司是用AWS然後你突然要轉GCP那你一定可以找到對應的服務對所以就是這個就是你學習這個knowledge那個可知環境也會變得蠻高的對所以就是大概就是它幾個重點對沒有錯現在其實這種color native的工具越來越多啦包含一些open source的工具其實它泛用性也都很高那剛剛說到這些cloud provider沒有相對應這些相對應是課金的嘛你不課金也有相對應所以其實大部分我們大家都知道說哪些階段需要什麼哪些階段需要什麼那現在的大多數的一些web service因為現在東西都uncloud了嘛那幾乎所有service都uncloud那這些概念我也是認為說未來是比較主流其實現在比較有資本的大公司都已經走這一套但小公司的話可能還沒有這麼多資本但未來大概率也會往這邊走因為自己控音法也是一個很不合理的一個事情對吧那我覺得從另外的角度來看大家應該要去審視自己現在做的這個專案它是什麼樣的一個架構如果它還是用那種一整包靠進去或許是這個環境它不夠跟上現在整個開發的一個趨勢那如果大家在做選擇指握的時候其實也可以參考一下作為一個指標啦那可以跟大家分享一下什麼是micro service因為其實說那個基本上跟micro service也是一個很相關的一個概念是是micro service跟cloud native就是一個必須要緊緊綁在一起不能就是完全是一對的概念吧就是micro service是說就是你要把你自己整個大的服務架構你需要自己去寫code的那幾個部分去拆分到盡可能可以完全獨立運作的模組這有很多的好處首先從剛cloud native的層面去講它的好處是說就是你今天一個大的服務如果它中間有某些小的component是cloud native他們的funtion就可以提供的比如說你今天需要做一個message queue類似covcard之類的的功能的話那你就直接去拉他們運算上面原生的這一套的相應的服務下來做然後原本你的服務可能一個就一個大code base就可以把它拆分成兩個小的小的micro service然後中間就用這個message queue去給它對接起來這樣子那你在開發上的成本的話這有很多的好處第一個就是他們cloudprovider裡面提供的這些cloud native的funtion他們肯定都是非常的robust就是不會說說壞就壞掉了那你就可以完全的相信它就把你這一部分的把你這一部分的功能完全外包給一個不會有什麼失敗的風險的一個一個人去幫你host對這是一個第一個最大的好處然後第二個的話我自己也是我自己體會非常深的是說就是你自己去把你的code base的裡面每一個micro service的職責給劃分清楚之後你在做test這件事情會方便非常多就是說一個理想的microservice是可以做到說就是它可以自己獨立運作自己開啟起來然後不需要旁邊沒有任何其他的service活著它自己也能夠有一些基本的功能在運作對那在這樣的情況下就會代表說它有一些對外的接口是會被很好定義下來那你就可以針對這些接口去對它做這些interface去對它做test那只要這些測試都通過你就可以說這個micro service是會work那每一個micro service都這麼做的話那你最後整個整體的服務架過程就會有辦法incremented去proof說它最後也能夠work這樣子的話就是你在整個開發的流程上面所以就是比較不會在哪邊有什麼就是閃失然後就這樣整個系統不會work剛剛做的這個部分就是現在蠻主流的一個狀況但老實講之前有一陣子大家又開始指責micro service有些人為差而差所以有點何久必分分久必合那種感覺然後就很不一樣比如說那個服務幹你根本沒必要拆micro service然後你如果拆micro service的話比如說那隻很小的我們就以有些人寫什麼java之類的假設java它sprint proof就會有一個開機會有一個overview那你的那個比如說你用你一個part你的resource就不能夠弄太小但其實你那個裡面可能只是做一些簡單的處理那你也給人家開一個service這也是一個過猶不及啊對吧是啊這個就是都是都是一些trade off反正你要自己去衡量就是對的但不管怎麼樣這個概念我認為還是現在相當主流的所以大家還是可以從這個層級去去想就是就有micro service加cloud native加kubernetes之後其實這在做setting design的話它會跟以前那種傳統的純server run那個design方式是完全完全都不太一樣的包括你一些networking的一些的一些設計其實用雲端的角度去開發後端我是認為現在會比較需要這概念就是有些人可能會覺得說你有cloud概念是比如說你devops才需要這概念但我自己是認為devops跟baggans是完全兩個互相之間的一個一個互相之間幫助的一個角色就是它甚至是我認為兩邊都需要有互相的概念你才有辦法做好一個角色那像我比較偏baggans那當然我也有devops的一些經驗所以對我來說做baggans的你從雲上去看的一個角度在開發上你會知道說什麼時候該做什麼什麼時候不該做那剛剛提到這幾個大名詞有興趣的可以去參考一下我們現在講到之前Tony是有在台灣工作過程的時間出過錢是嗎對有工作過一小段時間那也可以跟大家分享說你這幾個月大家在做哪些事情因為也是相關的事情簡單講就是我當時有因為就是自己本來就還蠻熟悉這一塊in far的東西因為之前弄創業的時候就很多東西要手動去搭然後搭完之後才能在上面去寫所以就是意外的還蠻熟悉這一塊的所以當時有拿到一個工作的機會就是去簡單講是公司上面有提供一套就是他們自己搭的Cubanitis系統然後放在機房裡面然後他是用來做就是很多不同的主機然後裡面上面有些有插GPU有些沒有對然後他就是把它整個包裝成一套Cubanitis的in far然後他在這個上面去寫了一套自己的軟體這個軟體就是用來就是讓就是記憶學習的任務可以做一些可以在這個Cubanitis系統的驅動之下做一些分佈式的運算然後可以就是比較有打比較高的承載然後也可以比較更有效的去抽象化的分佈這些GPU的資源跟其他的Hardware對的這樣的一套服務系統那我在裡面扮演的角色簡單來講就是去了解這整個Cubanitis系統然後讓就是上面會被部署下來的這些Machine learning training task跟這個Cubanitis架構會有辦法compatible一個形式然後就是簡單來講就是在做軟體端跟CubanitisIn far這邊的一個對接的角色剛剛提到首搭Cubanitis這是一個非常非常惱人的一個事情是的那你應該不需要管這一段吧不用那個是他們機房的IT會自己去管的但我需要去了解他們那些現在到底是怎麼樣的就比如我總要知道他們現在有幾台GPU可以用然後哪些東西要怎麼對接什麼的我們之前在那個Line群裡面然後就有人問貼一個類似這種operator一個operation的一個position然後我看了一下差不多就是管機房管機房其實超累的你要不要插網路線什麼的可是現在其實不太會做這件事情你現在台灣有雖然GCP在台灣有機房但你去說機房不是一個太技術性的工作它就是另類的一個顧機台就是顧你的那個server不要粗暴這樣子那當然如果今天大家是開發者居多嘛所以開發者的話如果你有這種Cubanative開發基本上就是直接什麼GCP AWS那就可以有很多很多很方便的事情比如說剛剛講到Cubanitis每一個Cubanitisprovider都有相對的Cubanitis engine那你其實用他們的會方便許多啦那你接下來你接下來也是用他們手搭的嗎對你未來的工作還是說會用一些Cubanitisprovider提供的一些服務我覺得應該是他們手搭這也是為什麼他們會需要SRE就是他們確實需要去跟他們就一些自己原生開發的app去做對決那你有在那個原生的對雲原生的k8s上面做過做過那個一些開發嗎原生的當然當然有啊就是GCP的Grenade engine或是AWS都有那個就相對容易了吧就是你需要管理的東西蠻少的就把parts要靠進去就好了我覺得我用原生開發的需要是如果你今天你今天就是單一綁定一個雲那其實會有很多他們的不同的CRT可以用就是他們的一些組件那這個會變成是你的服務你看如果今天你想要快你已經不想要sirparty因為你知道連到外網去都變慢了嘛假設你今天一個用哪一個sirparty管另外一個什麼用什麼sirparty管那你就到外網裡面那速度變慢如果你要最快你就是全部塞在同一個info裡面那你從而塞在一個info裡面反而就你就跟這個cloud provider密有合那這樣子你又更容易跟那個綁定所以回到我們上一集講的我覺得大者很大應該就是差不多就是這樣趨勢你在國外大家做這種project應該都是這種cloud resource直接開來開去的對他們對cloud都蠻有概念然後還有一個很大好處就是就是那個他們就學校的這種資源還蠻多的就是他們基本上每一堂課都可以跟學校申請那個GCP的credit然後每一堂課都是三百塊你剛那堂課的作業你根本就用不完所以覺得很多人會拿剩的就來做這些自己的事情三百塊一個休息應該不多欸其實還可以了就是因為你也不會只休一堂課基本上每堂課都有你說他同加在一個帳號都疊加在一個帳號不是他就是用coupon形式去給但是你可以自己選你什麼時候要用所以就甚至有人把那個東西直接拿來賣就是那個資源還蠻多也蠻定價的那這個這樣真的很好我覺得這就是資源不同的部分那我覺得要run一個service大概如果你要開一台VM一個月大概是六七七十塊美金左右兩千塊台幣左右就一台最基本然後加上一些networking的東西但其實我覺得算有有些人是要佈靜態網站有更便宜的方式但是說雲端開一台機器最便宜差不多的就是六七七十塊美金應該差不多這樣差不多所以大概像剛剛六七七十塊三百塊大概讓你用個四五個月左右不對因為你們不會一直開一直去serve所以應該可以用更久對阿就是如果你只是要練習的話那其實這個資源是非常夠用練習是很夠用但如果今天你要serve一個服務的話那可能就需要再多一點我說你要serve服務的話其實也有點考驗你個人的能力就是你當然會有辦法可以讓它變得更便宜看你知不知道怎麼搭就對也是看個人造化吧個人造化沒有阿你如果你今天流量高的話你今天開一台VM就是會流量進來你要去省當然可以省啦但你今天難道為了十塊錢二十塊錢去做一些很hacking然後沒有必要的優化嗎不會吧對也是阿我會說就是比如你只是需要一個database A的話你就不需要去開什麼database RDS或你是指這個喔對阿你你做這個但我剛剛東西是不含不含Code SQLCode SQL哪有這麼便宜Code SQL比VM還貴我剛剛那個東西只有突破開一台VM的情況下那可以跟大家分享一下因為在之前你有一些經驗就是比如說差一些微服務的經驗那你覺得如果你今天比如說今天有些人他的公司比較老舊那他有一些舊的服務是一層包想把它拆成微服務那要怎麼確保他的一些穩定性一些可用性那你會從什麼樣的指標去看就是首先拆服務那你覺得要符合他微服務的定義嗎就是每一個服務都是可以獨立運作的那你在high level design這整個你東西要怎麼拆分的時候當然就要去考量這個部分就是你到底要拆那幾個那他們之間又怎麼是怎麼互相溝通的這些東西一開始就要想得很清楚吧對那以我以我之前的案例來講的話就是那時候我們基本上把所有東西都寫在同一個code base裡面那這真的很大很肥一個那有時候哪個地方出問題了你要去改那這個東西可能你牽一把到動全身其他東西又跟著壞掉了這都很有可能會發生的那這整個大的東西也很難做task你只能做integration task就是說這個大東西你需要做什麼task會得到什麼結果那有時候這個integration task本身壞掉了你也不知道究竟是哪一個computer的的指責對就是這個會造成蠻多問題的吧尤其是如果你要最後把這些CD也串進來的話那你就沒有辦法做到比較increment to把所有的東西慢慢正確性給堆積起來整個東西能夠work這個架構對所以你一開始在design的時候就是要follow那個就是最小化的原則就是讓每個東西都確保它可以獨立運作獨立測試對之後系統的穩定性會有非常深遠的影響吧在那種測試的部分後來在CI的部分做一些testing了然後最基礎的就是用task然後做大一點的可能會做一些regression taskAPI level task這些東西是我覺得還蠻重要畢竟都自動都可以自動做像用把比如說用gitHub CID串起來那這些什麼runner的東西它都可以幫你去在你進口的時候去做一些tracking它是有效提升一些一些那個軟體開發的一些品質其實整個devop是一個概念它是一個軟體開發的文化而不是說是一個position我認為它更像是一個文化那可以跟大家分享一下就是你覺得你在這種開發開發週期的調整如果今天你把它拆小服務那你覺得對你的開發週期是更快的嗎比如說你今天拆因為做這個專案的時候是之前做之前我們host那個專案的時候嘛你拆個其他人做那是每個人負責一個service然後你再一起看這樣子對就是這個對開發週期來講的話看你的專案的規模如果你是自己一個人做的話那或許反而還會變慢但是如果你的team有一點規模的話那這個會有很大的好處的因為就是你我剛說的嘛每個人的micro service都會是有辦法獨立運作獨立測試的那就是代表說你做這個micro service的人你基本上完全不需要知道其他micro service在幹什麼東西就是你可以focus在自己一個比較小範圍的function裡面對那這個東西當然就會比較好開發就是你的這個scope變小了在人力資源的調度上它會比較好就是獨立的去分配是一個很大的好處的那一些dependency的討論是你還負責這些事情就比如說service與service之間的一些API aspect之類的對這個就是你最一開始就要思考的很透徹就不是當下你需要做的東西你要思考說之後可能會新加什麼樣的feature進來那它還有沒有辦法維持我覺得你一開始也不是說思考透徹你一開始應該是思考它的可變動性就是你要確保你接下來改動的時候是很快但你要說你一開始就完全定義好其實這也很難因為東西是會改的是對所以就是一開始要盡可能想得遠一點對就是可能是想說如果未來改的話我們要用最小的成本下去改但我反而不會覺得說你spec定好就不能修因為這個反而很奇怪吧對吧你一開始很多use case後面才進來的當然不是不能修就是你要確保它可以修對可以修然後最低成本去修我覺得這在設計上應該是從這個角度去想是的是的像你之前做的那個專案你說在他們local的infa裡面建kubernetes然後讓它去labyrinthgpu的一些trainingresource之類的那比如說像這種training來講我自己因為我沒有做過這類型的專案就是這種這個議題但我感覺是不是那種在solidware方面的一些讀寫速度資料流的處理會是蠻重要的資料的讀寫速度到還好那就要看你的資料集多大如果你的資料集是有辦法fit進去一個physical machine裡面的話那其實這個performance不會是太大的一個問題聽起來這資料不太大幾T以內因為當初這個平台它建立是要給一些就是研究人員做一些就是proper concept的一些小的東西就讓他們易用而已對因為如果你今天是給b端的假設你今天給b端比如說你今天給tesla那個資料大到靠北那這個時候就很重要了對對對對對OK不過你接下來或許就會做這件事情接下來你可能會考慮到production level的level量所以說你之前做的那你應該直接就是什麼pvc掛一掛應該就可以弄了吧對現在是這樣就之前之前的那個是這樣子之前比較是在focus在怎麼樣去調度那些gpu資源那個就是storage provide那那些gpu資源會怎麼外掛進去cronetics是你針對於那些driver那些東西要怎麼弄進去就是你就會有一些固定的workinode上面就是有搭著gpu的在cronetics裡面來講的話對就是你就是把那些note給label好然後你在deploy的時候你要看現在任務的形式來選到對應形式的gpu然後讓那個workinode去做這個用selecter的方式去在相對node上面開你要的資源對有更好的做法但當時是這樣子的那resourcemanagement是怎麼做就是比如說他gpugpu的比方你這個gpu是現在正在invues那你這個狀況會怎麼樣去去做資料的切分你就把它拆逼gpu嗎還是就是直接要pending之類的就是每個gpu就是就是一個gpu我們沒有再去切割然後這個gpu他現在有沒有在做任務那些你都有pocca從cobanet去拉出一些現在pocca他目前執行狀況那些資料有可能他其實不需要那麼大的算力但是他就是已經reserve了一個gpu然後那台gpu就就是被他booking走其他就進不來但或許他根本沒有那麼強這是很有可能會發生的但是你要在gpu上面去做就是task之間的context switch這個目前你要做新的話gpu的技術其實也還沒有到很精神我覺得之前那套至少在之前的案例裡面是多過用的因為我們是有在做這件事情所以所以其實是我剛問這件事情是因為有vgpu的一個概念我不知道你們那邊有沒有做到這個這樣子就之前是還沒有提出過OK那當時是什麼樣的卡好像a100有8張然後其他的我不太確定a100有8張a100一定可以切啦你a100沒有切那這樣子很浪費如果有一個人只是進去搞笑那這樣超浪費的對啊是這樣子沒有錯如果進去他媽寫什麼好多我那種超北南的沒有好多我開玩笑我都不會用gpu寫好多我說他比如說隨便圈一個垃圾那就直接book到a100對啊當時是這樣子不過你也可以一起他應該蠻快就券完了所以還好因為你是poc就還好但如果今天他是做那種真的是需要時間那這樣子其實是蠻浪費的不過沒差poc我覺得就還好就可以剛剛大家聽到我們這種這種開發上你看我們就連硬體都要去了解然後在雲端了解其實針對於說軟體工程他是一個很很大的一個學門就不是說什麼我好像他媽寫個API打過去的response就OK了那只是一個很基本的一個一個點就是你越往下越學不完我覺得這就是軟體工程他合位工程那合工程學門都是這樣的你一定是越學越難然後會有那個學習曲線就是你會以為你有一陣子你會以為你什麼都懂了但有一陣子你會以為什麼你什麼都不懂然後再過一陣子你會以為你好像真的懂了類似這種感覺你有這個感覺有這個情況嗎就是本來就是漸進式的成長事實上沒有錯很容易會覺得好像自己牛逼了後來發現自己做的東西根本就是垃圾你會覺得自己很牛逼然後就productionlevel看了都靠北這些東西就是那個半家家酒是是是那給大家一些建議吧我覺得這是一個蠻主流的包含剛剛提到的就是這些各種資源的整合還是我們剛剛提到的這種connected micro service我覺得他都是非常非常的AI什麼的都是很popular的一些未來的一些方向那可以給大家一些建議嗎如果接下來想要往這種SARS營運走那基本上就是我們剛剛說的你想要想要寫服務還是說你想要去做一些英法的東西你會怎麼樣給他們一些建議應該從哪方面去著手可以比較就是點對點的慢慢去增強自己每一個點補足然後到時候把它串起來這樣我覺得最主要就是把那個call native那一套給摸熟吧首先就是就是服務要怎麼容器化這個東西一定要先摸清楚畢竟這個就是已經是一個就是已經已經是一個既定的事實了大家都是這麼做的對然後再來就是那個call provider他裡面那些經典的服務就是你先找一家call provider像AWS就是去把它摸清楚就那些常見的東西啊在幹什麼像是什麼然後跟什麼那些東西他們各自能夠做到什麼樣的事情然後就是基本的操作面上你要怎麼讓他去跟你自己寫的一些service去做對接這些東西都先把它摸清楚然後因為這些東西他目前的學習成本已經比之前低很多了然後他的我覺得這些東西都是最基本必須要做到的就是如果這個也還沒有摸清楚的話其實後面的事情好像也沒有辦法做所以就是入門的話我覺得就先把某一家他的這些經典服務給摸清楚然後有辦法讓自己的專案以call native的形式被整個設計出來然後部署上去能夠work這樣子就算入門了吧那再更進階的話就是可能可以去考量skeleability的問題就是說如果你今天用戶流量增加那你的哪一個地方可能會變成bottleneck那哪一個東西他如果壞了的話可能會影響到讓什麼服務變成就是直接癱瘓掉對就是可能可以就是針對這些use case可能會federate的地方去做優化對就是進一步的去思考這些問題然後慢慢的讓你的架構變得更bust這樣對啊無聊的時候也可以去看一些tour像那個CNCF call native的computing foundation他裡面有很多很多tour那這些tour現在也都超主流的像我現在打開來看什麼ETCDCubanetis有用嗎然後什麼container runtime這個也是container D也是現在Cubanetisengine的底層什麼argo做CI的還是什麼fax CD還超多Helmchild對不對這些CubanetisPromiseus這些有的沒的都是超級主流基本上現在這些東西都超級成熟大家可以看一下那這個是for info的部分那for backend那你覺得對於bagend他應該要有什麼樣的態度去開發自己的servicebagend的話我覺得這個就很就是depends on你不知道你是在做什麼樣的business其實我也蠻不一樣的如果你說business logic那塊不管你單純說就是你覺得那個bagend該怎麼做對就是bagend skill的話我覺得最重要的是你自己寫code的態度就是跟你去學習一個新的東西的能力因為就是這些技術跌到現在太快了像以前可能沒有什麼AI的東西那你的bagend code自然就不會需要去跟AI的服務做對接那現在這些東西就是冒出來了那你自然就要有這個能力去adapt它就是他比較像是你自己要讓你的寫code的那個品質有辦法去容納任何未來可能會發生的事情的那種感覺吧就是簡單來講就是你code的一定要寫的是讓別人看得懂吧大部分時間是用來看的不是用來改的對就是你要確保你的code你的同事看得懂然後你未來自己也看得懂對就是你要讓它是一個可圖性OK的一個然後也有適度模組化的一個架構這樣子你到時候是要加新的feature上去像剛剛說的可能AI的應用今天突然冒出來你要加新的feature上去或是說你未來可能有什麼新的需求你需要去改它對這些東西都會對這個東西是蠻重要的一些基本的工程師的基本能力吧就是你要讓你的code是有一定的quality然後這個東西其實很通用這不局限於某一種程式語言或是怎麼樣因為這個東西概念上都是通用的就是讓你的程式可維護性有一定的水準這個是最重要的對這是比較general軟體工程的一個建議那我剛剛其實想問的是說我覺得這是你有看到native的觀念你寫bgm其實跟你以前寫bgm就會不太一樣耶往一些同步性的問題其實你就會思考到大scale的一個框架下你更有可能去遇到的問題是啊是啊這當然也是就是剛剛說要讓你的鞋扣有辦法去跟所有東西都做合作的一個概念對但是這個東西如果當你沒有看到native的概念你其實很多時候你會缺乏因為他說如果你是一個server side的概念其實你會覺得沒有那麼重要可是server side你可能會對比memory的控管你可能會有概念但是對於整個大框架可能就沒有這樣的思考但是如果你有的話就變成說你左右都有把它考慮進來那這個服務就更完整了我覺得今天的分享大家可以參考一下其實有蠻多細節可以討論的那如果大家有興趣的話也可以參與社群跟我們討論那在節目最後感謝Tony今天的分享感謝Tony謝謝Ted那今天節目到這裡謝謝大家掰掰